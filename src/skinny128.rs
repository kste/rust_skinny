//! Implementation of the SKINNY-128 block cipher.
static SKINNY128_SBOX: [u8; 256] = [
    0x65, 0x4c, 0x6a, 0x42, 0x4b, 0x63, 0x43, 0x6b, 0x55, 0x75, 0x5a, 0x7a, 0x53, 0x73, 0x5b, 0x7b,
    0x35, 0x8c, 0x3a, 0x81, 0x89, 0x33, 0x80, 0x3b, 0x95, 0x25, 0x98, 0x2a, 0x90, 0x23, 0x99, 0x2b,
    0xe5, 0xcc, 0xe8, 0xc1, 0xc9, 0xe0, 0xc0, 0xe9, 0xd5, 0xf5, 0xd8, 0xf8, 0xd0, 0xf0, 0xd9, 0xf9,
    0xa5, 0x1c, 0xa8, 0x12, 0x1b, 0xa0, 0x13, 0xa9, 0x05, 0xb5, 0x0a, 0xb8, 0x03, 0xb0, 0x0b, 0xb9,
    0x32, 0x88, 0x3c, 0x85, 0x8d, 0x34, 0x84, 0x3d, 0x91, 0x22, 0x9c, 0x2c, 0x94, 0x24, 0x9d, 0x2d,
    0x62, 0x4a, 0x6c, 0x45, 0x4d, 0x64, 0x44, 0x6d, 0x52, 0x72, 0x5c, 0x7c, 0x54, 0x74, 0x5d, 0x7d,
    0xa1, 0x1a, 0xac, 0x15, 0x1d, 0xa4, 0x14, 0xad, 0x02, 0xb1, 0x0c, 0xbc, 0x04, 0xb4, 0x0d, 0xbd,
    0xe1, 0xc8, 0xec, 0xc5, 0xcd, 0xe4, 0xc4, 0xed, 0xd1, 0xf1, 0xdc, 0xfc, 0xd4, 0xf4, 0xdd, 0xfd,
    0x36, 0x8e, 0x38, 0x82, 0x8b, 0x30, 0x83, 0x39, 0x96, 0x26, 0x9a, 0x28, 0x93, 0x20, 0x9b, 0x29,
    0x66, 0x4e, 0x68, 0x41, 0x49, 0x60, 0x40, 0x69, 0x56, 0x76, 0x58, 0x78, 0x50, 0x70, 0x59, 0x79,
    0xa6, 0x1e, 0xaa, 0x11, 0x19, 0xa3, 0x10, 0xab, 0x06, 0xb6, 0x08, 0xba, 0x00, 0xb3, 0x09, 0xbb,
    0xe6, 0xce, 0xea, 0xc2, 0xcb, 0xe3, 0xc3, 0xeb, 0xd6, 0xf6, 0xda, 0xfa, 0xd3, 0xf3, 0xdb, 0xfb,
    0x31, 0x8a, 0x3e, 0x86, 0x8f, 0x37, 0x87, 0x3f, 0x92, 0x21, 0x9e, 0x2e, 0x97, 0x27, 0x9f, 0x2f,
    0x61, 0x48, 0x6e, 0x46, 0x4f, 0x67, 0x47, 0x6f, 0x51, 0x71, 0x5e, 0x7e, 0x57, 0x77, 0x5f, 0x7f,
    0xa2, 0x18, 0xae, 0x16, 0x1f, 0xa7, 0x17, 0xaf, 0x01, 0xb2, 0x0e, 0xbe, 0x07, 0xb7, 0x0f, 0xbf,
    0xe2, 0xca, 0xee, 0xc6, 0xcf, 0xe7, 0xc7, 0xef, 0xd2, 0xf2, 0xde, 0xfe, 0xd7, 0xf7, 0xdf, 0xff,
];

static KEY_PERM: [u8; 16] = [9, 15, 8, 13, 10, 14, 12, 11, 0, 1, 2, 3, 4, 5, 6, 7];

static CONSTANTS: [u8; 56] = [
    0x01, 0x03, 0x07, 0x0f, 0x1f, 0x3e, 0x3d, 0x3b, 0x37, 0x2f, 0x1e, 0x3c, 0x39, 0x33, 0x27, 0x0e,
    0x1d, 0x3a, 0x35, 0x2b, 0x16, 0x2c, 0x18, 0x30, 0x21, 0x02, 0x05, 0x0b, 0x17, 0x2e, 0x1c, 0x38,
    0x31, 0x23, 0x06, 0x0d, 0x1b, 0x36, 0x2d, 0x1a, 0x34, 0x29, 0x12, 0x24, 0x08, 0x11, 0x22, 0x04,
    0x09, 0x13, 0x26, 0x0C, 0x19, 0x32, 0x25, 0x0A,
];

static SR_PERM: [u8; 16] = [0, 1, 2, 3, 7, 4, 5, 6, 10, 11, 8, 9, 13, 14, 15, 12];

pub enum TweakeyType {
    TK1,
    TK2,
    TK3,
}

pub fn key_schedule_128(tweakey: &[u8], rounds: u64, keytype: TweakeyType) -> Vec<u8> {
    let mut round_keys: Vec<u8> = vec![0; 16 * rounds as usize];
    let mut state: Vec<u8> = match keytype {
        TweakeyType::TK1 => vec![0; 16],
        TweakeyType::TK2 => vec![0; 32],
        TweakeyType::TK3 => vec![0; 48],
    };

    let len = state.len();
    // Convert key to a state of 16 nibbles
    state.clone_from_slice(&tweakey[..len]);

    for round in 0..rounds {
        for i in 0..8 {
            let key_idx = 16 * round + i;
            round_keys[key_idx as usize] = match keytype {
                TweakeyType::TK1 => state[i as usize],
                TweakeyType::TK2 => state[i as usize] ^ state[(i + 16) as usize],
                TweakeyType::TK3 => {
                    state[i as usize] ^ state[(i + 16) as usize] ^ state[(i + 32) as usize]
                }
            };
        }

        // Add constants
        round_keys[16 * round as usize] ^= CONSTANTS[round as usize] & 0xf;
        round_keys[16 * round as usize + 4] ^= (CONSTANTS[round as usize] >> 4) & 0xf;
        round_keys[16 * round as usize + 8] ^= 0x2;

        // Apply permutation
        let mut tmp: Vec<u8> = vec![0; state.len()];
        for i in 0..state.len() {
            tmp[i] = state[16 * (i / 16) + KEY_PERM[i % 16] as usize];
        }
        state.clone_from_slice(&tmp);

        // LFSR
        match keytype {
            TweakeyType::TK2 => {
                for nibble in state.iter_mut().take(24).skip(16) {
                    *nibble =
                        ((*nibble << 1) & 0xFE) ^ ((*nibble >> 7) & 0x1) ^ ((*nibble >> 5) & 0x1);
                }
            }
            TweakeyType::TK3 => {
                for nibble in state.iter_mut().take(24).skip(16) {
                    *nibble =
                        ((*nibble << 1) & 0xFE) ^ ((*nibble >> 7) & 0x1) ^ ((*nibble >> 5) & 0x1);
                }
                for nibble in state.iter_mut().take(40).skip(32) {
                    *nibble =
                        ((*nibble >> 1) & 0x7F) ^ ((*nibble << 7) & 0x80) ^ ((*nibble << 1) & 0x80);
                }
            }
            _ => (),
        }
    }

    round_keys
}

fn sub_bytes(state: &[u8; 16]) -> [u8; 16] {
    let mut tmp_state: [u8; 16] = [0; 16];

    for nibble in 0..16 {
        tmp_state[nibble] = SKINNY128_SBOX[state[nibble] as usize];
    }
    tmp_state
}

fn add_tweakey(state: &[u8; 16], tweakey: &[u8]) -> [u8; 16] {
    let mut tmp_state: [u8; 16] = [0; 16];

    for nibble in 0..16 {
        tmp_state[nibble] = state[nibble] ^ tweakey[nibble];
    }
    tmp_state
}

fn shift_rows(state: &[u8; 16]) -> [u8; 16] {
    let mut tmp_state: [u8; 16] = [0; 16];

    for nibble in 0..16 {
        tmp_state[nibble] = state[SR_PERM[nibble] as usize];
    }
    tmp_state
}

fn mix_columns(state: &[u8; 16]) -> [u8; 16] {
    let mut tmp_state: [u8; 16] = [0; 16];
    // MixColumns
    for col in 0..4 {
        let tmp = state[12 + col];
        tmp_state[12 + col] = state[col] ^ state[8 + col];
        tmp_state[8 + col] = state[4 + col] ^ state[8 + col];
        tmp_state[4 + col] = state[col];
        tmp_state[col] = tmp ^ tmp_state[12 + col];
    }
    tmp_state
}

pub fn skinny128(input: &[u8; 16], rounds: u64, round_keys: &[u8]) -> [u8; 16] {
    let mut state: [u8; 16] = [0; 16];

    // Convert input to a state of 16 nibbles
    state.clone_from_slice(input);

    for rnd in 0..rounds {
        // S-box layer
        state = sub_bytes(&state);
        state = add_tweakey(
            &state,
            &round_keys[16 * rnd as usize..16 * (rnd as usize + 1)],
        );
        state = shift_rows(&state);
        state = mix_columns(&state);
    }

    state
}
