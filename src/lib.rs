mod skinny64;
mod skinny128;

pub fn skinny64_64(input: &[u8; 8], tweakey: &[u8]) -> [u8; 8] {
    let num_rounds = 32;
    let round_keys = skinny64::key_schedule_64(tweakey, num_rounds, skinny64::TweakeyType::TK1);
    skinny64::skinny64(input, num_rounds, &round_keys)
}

pub fn skinny64_128(input: &[u8; 8], tweakey: &[u8]) -> [u8; 8] {
    let num_rounds = 36;
    let round_keys = skinny64::key_schedule_64(tweakey, num_rounds, skinny64::TweakeyType::TK2);
    skinny64::skinny64(input, num_rounds, &round_keys)
}

pub fn skinny64_192(input: &[u8; 8], tweakey: &[u8]) -> [u8; 8] {
    let num_rounds = 40;
    let round_keys = skinny64::key_schedule_64(tweakey, num_rounds, skinny64::TweakeyType::TK3);
    skinny64::skinny64(input, num_rounds, &round_keys)
}

pub fn skinny128_128(input: &[u8; 16], tweakey: &[u8]) -> [u8; 16] {
    let num_rounds = 40;
    let round_keys = skinny128::key_schedule_128(tweakey, num_rounds, skinny128::TweakeyType::TK1);
    skinny128::skinny128(input, num_rounds, &round_keys)
}

pub fn skinny128_256(input: &[u8; 16], tweakey: &[u8]) -> [u8; 16] {
    let num_rounds = 48;
    let round_keys = skinny128::key_schedule_128(tweakey, num_rounds, skinny128::TweakeyType::TK2);
    skinny128::skinny128(input, num_rounds, &round_keys)
}

pub fn skinny128_384(input: &[u8; 16], tweakey: &[u8]) -> [u8; 16] {
    let num_rounds = 56;
    let round_keys = skinny128::key_schedule_128(tweakey, num_rounds, skinny128::TweakeyType::TK3);
    skinny128::skinny128(input, num_rounds, &round_keys)
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn testvector_0_skinny64_64() {
        let key = vec![0x48, 0x88, 0xba, 0xc6, 0x80, 0xc8, 0xa2, 0xe2];
        let plaintext = [0x54, 0x81, 0xb2, 0x17, 0x83, 0x72, 0xff, 0xf6];
        let ciphertext = [0x24, 0x12, 0xce, 0xce, 0x48, 0x25, 0x00, 0x45];
        assert_eq!(ciphertext, skinny64_64(&plaintext, &key));
    }

    #[test]
    fn testvector_1_skinny64_64() {
        let key = vec![0x79, 0x4c, 0xdf, 0xbc, 0xd9, 0x74, 0x9b, 0xa9];
        let plaintext = [0xc7, 0x3c, 0x77, 0x96, 0x8f, 0xee, 0x27, 0xc1];
        let ciphertext = [0x54, 0xf5, 0xd5, 0xce, 0xa1, 0x4f, 0x6b, 0x8d];
        assert_eq!(ciphertext, skinny64_64(&plaintext, &key));
    }

    #[test]
    fn testvector_2_skinny64_64() {
        let key = vec![0xf5, 0x26, 0x98, 0x26, 0xfc, 0x68, 0x12, 0x38];
        let plaintext = [0x06, 0x03, 0x4f, 0x95, 0x77, 0x24, 0xd1, 0x9d];
        let ciphertext = [0xbb, 0x39, 0xdf, 0xb2, 0x42, 0x9b, 0x8a, 0xc7];
        assert_eq!(ciphertext, skinny64_64(&plaintext, &key));
    }

    #[test]
    fn testvector_0_skinny64_128() {
        let key = vec![
            0x9e, 0xb9, 0x36, 0x40, 0xd0, 0x88, 0xda, 0x63, 0x76, 0xa3, 0x9d, 0x1c, 0x8b, 0xea,
            0x71, 0xe1,
        ];
        let plaintext = [0xcf, 0x16, 0xcf, 0xe8, 0xfd, 0x0f, 0x98, 0xaa];
        let ciphertext = [0x6c, 0xed, 0xa1, 0xf4, 0x3d, 0xe9, 0x2b, 0x9e];
        assert_eq!(ciphertext, skinny64_128(&plaintext, &key));
    }

    #[test]
    fn testvector_1_skinny64_128() {
        let key = vec![
            0xe8, 0xd0, 0xc6, 0x99, 0x6b, 0xf5, 0xfb, 0xca, 0x9d, 0x49, 0xc6, 0xfc, 0xe4, 0xe4,
            0x51, 0x6c,
        ];
        let plaintext = [0x79, 0xaa, 0x3c, 0x42, 0x0b, 0x44, 0x46, 0xfc];
        let ciphertext = [0x48, 0x6c, 0x29, 0x00, 0xd0, 0xe9, 0xcd, 0x80];
        assert_eq!(ciphertext, skinny64_128(&plaintext, &key));
    }

    #[test]
    fn testvector_0_skinny64_192() {
        let key = vec![
            0xed, 0x00, 0xc8, 0x5b, 0x12, 0x0d, 0x68, 0x61, 0x87, 0x53, 0xe2, 0x4b, 0xfd, 0x90,
            0x8f, 0x60, 0xb2, 0xdb, 0xb4, 0x1b, 0x42, 0x2d, 0xfc, 0xd0,
        ];
        let plaintext = [0x53, 0x0c, 0x61, 0xd3, 0x5e, 0x86, 0x63, 0xc3];
        let ciphertext = [0xdd, 0x2c, 0xf1, 0xa8, 0xf3, 0x30, 0x30, 0x3c];
        assert_eq!(ciphertext, skinny64_192(&plaintext, &key));
    }

    #[test]
    fn testvector_1_skinny64_192() {
        let key = vec![
            0x7c, 0x8f, 0x3e, 0xcf, 0xfc, 0x93, 0x0b, 0x53, 0xaf, 0x07, 0x47, 0x0b, 0x4d, 0xf6,
            0xec, 0x18, 0x95, 0x8a, 0x2b, 0x15, 0xfc, 0x70, 0x4b, 0x5d,
        ];
        let plaintext = [0x60, 0x50, 0x7d, 0x5e, 0xb3, 0xce, 0x1b, 0x31];
        let ciphertext = [0x0d, 0x23, 0x7a, 0xff, 0xa2, 0x62, 0x06, 0x84];
        assert_eq!(ciphertext, skinny64_192(&plaintext, &key));
    }

    #[test]
    fn testvector_0_skinny128_128() {
        let key = vec![
            0x4f, 0x55, 0xcf, 0xb0, 0x52, 0x0c, 0xac, 0x52, 0xfd, 0x92, 0xc1, 0x5f, 0x37, 0x07,
            0x3e, 0x93,
        ];
        let plaintext = [
            0xf2, 0x0a, 0xdb, 0x0e, 0xb0, 0x8b, 0x64, 0x8a, 0x3b, 0x2e, 0xee, 0xd1, 0xf0, 0xad,
            0xda, 0x14,
        ];
        let ciphertext = [
            0x22, 0xff, 0x30, 0xd4, 0x98, 0xea, 0x62, 0xd7, 0xe4, 0x5b, 0x47, 0x6e, 0x33, 0x67,
            0x5b, 0x74,
        ];
        assert_eq!(ciphertext, skinny128_128(&plaintext, &key));
    }

    #[test]
    fn testvector_0_skinny128_256() {
        let key = vec![0x00,0x9c,0xec,0x81,0x60,0x5d,0x4a,0xc1,0xd2,0xae,0x9e,0x30,0x85,0xd7,0xa1,0xf3,0x1a,0xc1,0x23,0xeb,0xfc,0x00,0xfd,0xdc,0xf0,0x10,0x46,0xce,0xed,0xdf,0xca,0xb3,
        ];
        let plaintext = [0x3a,0x0c,0x47,0x76,0x7a,0x26,0xa6,0x8d,0xd3,0x82,0xa6,0x95,0xe7,0x02,0x2e,0x25,
        ];
        let ciphertext = [0xb7,0x31,0xd9,0x8a,0x4b,0xde,0x14,0x7a,0x7e,0xd4,0xa6,0xf1,0x6b,0x9b,0x58,0x7f,
        ];
        assert_eq!(ciphertext, skinny128_256(&plaintext, &key));
    }

    #[test]
    fn testvector_0_skinny128_384() {
        let key = vec![0xdf,0x88,0x95,0x48,0xcf,0xc7,0xea,0x52,0xd2,0x96,0x33,0x93,0x01,0x79,0x74,0x49,0xab,0x58,0x8a,0x34,0xa4,0x7f,0x1a,0xb2,0xdf,0xe9,0xc8,0x29,0x3f,0xbe,0xa9,0xa5,0xab,0x1a,0xfa,0xc2,0x61,0x10,0x12,0xcd,0x8c,0xef,0x95,0x26,0x18,0xc3,0xeb,0xe8,
        ];
        let plaintext = [0xa3,0x99,0x4b,0x66,0xad,0x85,0xa3,0x45,0x9f,0x44,0xe9,0x2b,0x08,0xf5,0x50,0xcb,
        ];
        let ciphertext = [0x94,0xec,0xf5,0x89,0xe2,0x01,0x7c,0x60,0x1b,0x38,0xc6,0x34,0x6a,0x10,0xdc,0xfa,
        ];
        assert_eq!(ciphertext, skinny128_384(&plaintext, &key));
    }
}
